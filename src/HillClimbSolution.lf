target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false,
}

import Display from "lib/Display.lf"
import Motors from "lib/Motors.lf"
import GyroAngle from "lib/IMU.lf"
import Accelerometer from "lib/IMU.lf"
import MotorsWithFeedback from "lib/MotorsWithFeedback.lf"
import Encoders from "lib/Encoders.lf"




reactor Robot{
  input drive:int
  motors = new Motors ()
  acce = new Accelerometer ()
  angle = new GyroAngle ()
  mf = new MotorsWithFeedback()
  e0 = new Encoders()
  d0 = new Display()

  state Angle:float = 0;
  state gain:float = 0.5;
  state angle_pre: float = 0
  timer t(0, 10 ms);

  e0.right -> mf.right;
  e0.left -> mf.left;


  reaction(t)-> angle.trigger ,acce.trigger, e0.trigger{=
      lf_set(angle.trigger,true);
      lf_set(acce.trigger,true);
      lf_set(e0.trigger, true);
  =}




  reaction (acce.x,acce.y) -> d0.line1,d0.line2{=
      static char buf0[17];
      snprintf(buf0, 17, "roll:%f", acce.y->value);
      lf_set(d0.line1,buf0);

      static char buf1[17];
      snprintf(buf1, 17, "pitch:%f", acce.x->value);
      lf_set(d0.line2,buf1);
  =}

  initial mode ROLL{
      reaction(acce.y,acce.x, angle.z) -> mf.left_speed, mf.right_speed, d0.line3, d0.line0, motors.left_power,motors.right_power,DRIVING_UP,TURN {=
          lf_set(d0.line0, "ROLL");

          static char buf3[17];
          snprintf(buf3, 17, "Y:%.3f", acce.y->value);
          lf_set(d0.line3, buf3);

          lf_set(mf.left_speed,-0.1);
          lf_set(mf.right_speed,0.1);

          if(acce.y->value < 0.05 && acce.y->value > -0.05 ){

              
              if(acce.x->value > 0.02){
                  lf_set(mf.left_speed, 0); 
                  lf_set(mf.right_speed, 0); 
                  lf_set_mode(DRIVING_UP);
                  
              }
              else {
                  self->angle_pre = angle.z->value;
                  
                  
              }
                  
          }

          else if(acce.y->value < 0){
              
              lf_set(mf.left_speed, 0.05);
              lf_set(mf.right_speed,-0.05);
              
          }

          else if(acce.y->value > 0){

              lf_set(mf.left_speed,-0.05);
              lf_set(mf.right_speed,0.05);
              
          }
          // // static char buf3[17];
          // // snprintf(buf3, 17, "L:%.3f, R:%.3f", motors.left_power->value, motors.right_power->value);
          // // lf_set(d0.line3, buf3);
          

      =}
  }

  mode DRIVING_UP{
  reaction(acce.y, acce.x,angle.z) -> CalibrateUp, check_driving_end, d0.line3, motors.left_power,motors.right_power, d0.line0, mf.left_speed, mf.right_speed,TURN {=
      static char buf3[17];
      snprintf(buf3, 17, "Y:%.3f", acce.y->value);
      lf_set(d0.line3, buf3);
      
      if(acce.y->value < 0.02 && acce.y->value > -0.02){
          // lf_set(mf.left_speed, 0.2*acce.x->value); 
          // lf_set(mf.right_speed, 0.2*acce.x->value); 
          lf_set(mf.left_speed, 0.1); 
          lf_set(mf.right_speed, 0.1); 
          

          lf_set(d0.line0, "DriveUp");

          lf_set_mode(check_driving_end);
      } else {
              lf_set_mode(CalibrateUp);
      }
      
  =}

  


  }
  mode CalibrateUp{
      reaction(acce.y,acce.x, angle.z) -> mf.left_speed, mf.right_speed, d0.line3, d0.line0, motors.left_power,motors.right_power,DRIVING_UP,TURN {=
          lf_set(d0.line0, "CalibrateUp");
          static char buf3[17];
          snprintf(buf3, 17, "Y:%.3f", acce.y->value);
          lf_set(d0.line3, buf3);
      
          if(acce.y->value < 0.05 && acce.y->value > -0.05 ){

              
              lf_set_mode(DRIVING_UP);
                  
          }

          else if(acce.y->value < 0){
              
              lf_set(mf.left_speed, 0.05);
              lf_set(mf.right_speed,-0.05);
              
          }

          else if(acce.y->value > 0){

              lf_set(mf.left_speed,-0.05);
              lf_set(mf.right_speed,0.05);
              
          }
          
          

      =}
  }

  mode DRIVING_DOWN {
      reaction(acce.y, acce.x,angle.z) -> CalibrateDown, check_driving_end, d0.line3, motors.left_power,motors.right_power, d0.line0, mf.left_speed, mf.right_speed,TURN {=
          // lf_set(mf.left_speed, -0.2*acce.x->value); 
          // lf_set(mf.right_speed, -0.2*acce.x->value); 
          lf_set(d0.line0, "DriveDown");
          if(acce.y->value < 0.05 && acce.y->value > -0.05 ) {
              lf_set(mf.left_speed, 0.1); 
              lf_set(mf.right_speed, 0.1); 
              
          } else {
              lf_set_mode(CalibrateDown);
          }
  
          
      =}
      
          
  }

  mode CalibrateDown {
      reaction(acce.y, acce.x,angle.z) -> DRIVING_DOWN, check_driving_end, d0.line3, motors.left_power,motors.right_power, d0.line0, mf.left_speed, mf.right_speed,TURN {=
          lf_set(d0.line0, "CalibrateDown");
          if(acce.y->value < 0.05 && acce.y->value > -0.05 ){
              lf_set_mode(DRIVING_DOWN);
                  
          }

          else if(acce.y->value < 0){
              lf_set(mf.left_speed,-0.05);
              lf_set(mf.right_speed,0.05);
              
          }

          else if(acce.y->value > 0){

              lf_set(mf.left_speed, 0.05);
              lf_set(mf.right_speed,-0.05);


          }
  
          
      =}
  }

  mode check_driving_end {
      reaction(acce.x,angle.z) -> d0.line3, motors.left_power,motors.right_power, d0.line0, mf.left_speed, mf.right_speed,TURN,DRIVING_UP {=
          lf_set(d0.line0, "check_driving_end");
          if(acce.x->value <0.02){
              self->angle_pre = angle.z->value;

              lf_set_mode(TURN);
              
          }else {
            lf_set_mode(DRIVING_UP);
          }
      =}
  }

  mode TURN{
      reaction(angle.z)->mf.left_speed, mf.right_speed, d0.line3, d0.line0, motors.left_power,motors.right_power,DRIVING_DOWN{=
          lf_set(d0.line0, "TURN");
          lf_set(mf.left_speed,0.1);
          lf_set(mf.right_speed,-0.1);

          static char buf3[17];
          snprintf(buf3, 17, "L:%.3f, R:%.3f", motors.left_power->value, motors.right_power->value);
          lf_set(d0.line3, buf3);

          if((angle.z->value - self->angle_pre) > 170 || (angle.z->value - self->angle_pre) <-170){
              lf_set(mf.left_speed,0);
              lf_set(mf.right_speed,0);
              lf_set_mode(DRIVING_DOWN);
          }
      =}
  }
}
main reactor{
  robot = new Robot();
  
}